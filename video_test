<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course: SketchUp Fundamentals - ArchAdemia</title>
    <script src="https://player.vimeo.com/api/player.js"></script>
    <style>
        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --bg-tertiary: #000000;
            --text-primary: #333333;
            --text-secondary: #666666;
            --text-light: #999999;
            --border-color: #e9ecef;
            --card-bg: #ffffff;
            --modal-bg: #ffffff;
            --shadow: rgba(0,0,0,0.1);
            --shadow-heavy: rgba(0,0,0,0.3);
            --accent-blue: #007AFF;
            --accent-blue-hover: #0056CC;
        }
        
        [data-theme="dark"] {
            --bg-primary: #141414;
            --bg-secondary: #1f1f1f;
            --bg-tertiary: #ffffff;
            --text-primary: #ffffff;
            --text-secondary: #e0e0e0;
            --text-light: #cccccc;
            --border-color: #404040;
            --card-bg: #1f1f1f;
            --modal-bg: #1f1f1f;
            --shadow: rgba(0,0,0,0.4);
            --shadow-heavy: rgba(0,0,0,0.7);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Helvetica', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            line-height: 1.4;
            color: var(--text-primary);
            letter-spacing: -0.05px;
            background-color: var(--bg-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        h1, h2, h3, h4, h5, h6 {
            font-weight: 800;
            letter-spacing: -0.05px;
        }
        
        /* Header - Same as pricing page */
        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            z-index: 1000;
            padding: 0.75rem 2rem;
            transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }
        
        [data-theme="dark"] .header {
            background: rgba(20, 20, 20, 0.8);
            border-bottom: 1px solid rgba(255,255,255,0.05);
        }
        
        .nav {
            display: flex;
            justify-content: center;
            align-items: center;
            max-width: 1000px;
            margin: 0 auto;
            position: relative;
        }
        
        .logo {
            position: absolute;
            left: 0;
            font-size: 1.3rem;
            font-weight: 800;
            color: var(--text-primary);
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 2.5rem;
            margin: 0;
            padding: 0;
        }
        
        .nav-links a {
            text-decoration: none;
            color: var(--text-primary);
            font-size: 0.875rem;
            font-weight: 400;
            transition: color 0.3s ease;
            padding: 0.5rem 0;
        }
        
        .nav-links a:hover {
            color: #007AFF;
        }
        
        .nav-buttons {
            position: absolute;
            right: 0;
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .theme-toggle {
            background: none;
            border: 1.5px solid var(--text-primary);
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--text-primary);
        }
        
        .theme-toggle:hover {
            background: var(--text-primary);
            color: var(--bg-primary);
        }
        
        .theme-icon {
            width: 14px;
            height: 14px;
            fill: currentColor;
        }
        
        /* Main Content */
        .main-content {
            margin-top: 80px;
            min-height: calc(100vh - 80px);
        }
        
        /* Course Header */
        .course-header {
            background: var(--bg-primary);
            padding: 3rem 2rem 2rem;
            border-bottom: 1px solid var(--border-color);
        }
        
        .course-header-container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 3rem;
            align-items: center;
        }
        
        .course-info h1 {
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }
        
        .course-info p {
            font-size: 1.1rem;
            color: var(--text-secondary);
            line-height: 1.5;
            margin-bottom: 1.5rem;
        }
        
        .course-meta {
            display: flex;
            gap: 2rem;
            font-size: 0.9rem;
            color: var(--text-light);
        }
        
        .course-progress-card {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 20px var(--shadow);
            border: 2px solid var(--border-color);
        }
        
        .progress-title {
            font-size: 1.2rem;
            font-weight: 800;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }
        
        .overall-progress {
            margin-bottom: 1.5rem;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--border-color);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #007AFF, #00C7FF);
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        
        .progress-text {
            font-size: 0.9rem;
            color: var(--text-secondary);
            display: flex;
            justify-content: space-between;
        }
        
        .continue-btn {
            width: 100%;
            background: var(--accent-blue);
            color: white;
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }
        
        .continue-btn:hover {
            background: var(--accent-blue-hover);
            transform: translateY(-1px);
        }
        
        /* Video Section */
        .video-section {
            background: var(--bg-secondary);
            padding: 3rem 2rem;
        }
        
        .video-container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 3rem;
            align-items: start;
        }
        
        .video-player-wrapper {
            background: var(--card-bg);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 8px 30px var(--shadow);
            position: relative;
        }
        
        .video-player {
            width: 100%;
            aspect-ratio: 16/9;
            border: none;
        }
        
        .video-controls {
            padding: 1.5rem;
            background: var(--card-bg);
        }
        
        .video-title {
            font-size: 1.3rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }
        
        .video-progress {
            margin-bottom: 1rem;
        }
        
        .video-progress-text {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
        }
        
        .video-actions {
            display: flex;
            gap: 1rem;
        }
        
        .mark-complete-btn {
            background: #28a745;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }
        
        .mark-complete-btn:hover {
            background: #1e7e34;
        }
        
        .mark-complete-btn:disabled {
            background: var(--text-light);
            cursor: not-allowed;
        }
        
        .reset-btn {
            background: transparent;
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }
        
        .reset-btn:hover {
            border-color: var(--accent-blue);
            color: var(--accent-blue);
        }
        
        /* Course Sidebar */
        .course-sidebar {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 20px var(--shadow);
            border: 2px solid var(--border-color);
            height: fit-content;
        }
        
        .sidebar-title {
            font-size: 1.2rem;
            font-weight: 800;
            margin-bottom: 1.5rem;
            color: var(--text-primary);
        }
        
        .lesson-list {
            list-style: none;
        }
        
        .lesson-item {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid transparent;
            position: relative;
        }
        
        .lesson-item:hover {
            background: var(--bg-secondary);
            border-color: var(--border-color);
        }
        
        .lesson-item.active {
            background: rgba(0, 122, 255, 0.1);
            border-color: var(--accent-blue);
        }
        
        .lesson-item.completed {
            background: rgba(40, 167, 69, 0.1);
            border-color: #28a745;
        }
        
        .lesson-title {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
            font-size: 0.95rem;
        }
        
        .lesson-duration {
            font-size: 0.8rem;
            color: var(--text-light);
        }
        
        .lesson-status {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--border-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 800;
        }
        
        .lesson-item.completed .lesson-status {
            background: #28a745;
            color: white;
        }
        
        .lesson-item.active .lesson-status {
            background: var(--accent-blue);
            color: white;
        }
        
        /* Debug Panel */
        .debug-panel {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 1.5rem;
            margin-top: 2rem;
            box-shadow: 0 4px 20px var(--shadow);
            border: 2px solid var(--border-color);
        }
        
        .debug-title {
            font-size: 1rem;
            font-weight: 800;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }
        
        .debug-info {
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.8rem;
            background: var(--bg-secondary);
            padding: 1rem;
            border-radius: 8px;
            white-space: pre-line;
            color: var(--text-secondary);
            line-height: 1.4;
            max-height: 200px;
            overflow-y: auto;
        }
        
        /* Footer */
        .footer {
            background: var(--bg-tertiary);
            color: var(--bg-primary);
            padding: 3rem 2rem 2rem;
            margin-top: 4rem;
        }
        
        [data-theme="dark"] .footer {
            background: #000000;
            color: #ffffff;
        }
        
        .footer-container {
            max-width: 1400px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 2rem;
        }
        
        .footer-section h4 {
            margin-bottom: 1rem;
            font-size: 1.1rem;
            font-weight: 800;
        }
        
        .footer-section ul {
            list-style: none;
        }
        
        .footer-section a {
            color: var(--text-light);
            text-decoration: none;
            font-size: 0.9rem;
            line-height: 2;
            transition: color 0.3s;
        }
        
        .footer-section a:hover {
            color: var(--bg-primary);
        }
        
        [data-theme="dark"] .footer-section a {
            color: #cccccc;
        }
        
        [data-theme="dark"] .footer-section a:hover {
            color: #ffffff;
        }
        
        .footer-bottom {
            border-top: 1px solid var(--border-color);
            margin-top: 2rem;
            padding-top: 2rem;
            text-align: center;
            color: var(--text-secondary);
        }
        
        /* Responsive Design */
        @media (max-width: 1024px) {
            .course-header-container,
            .video-container {
                grid-template-columns: 1fr;
                gap: 2rem;
            }
        }
        
        function simulateVideoForDemo() {
            // Simulate a 5-minute video for demo purposes
            videoDuration = 300; // 5 minutes
            updateDebugInfo('🎭 Demo mode: Simulating 5-minute video');
            updateDebugInfo('🖱 Click "Start Demo" to simulate video progress');
            
            // Add demo controls
            const markCompleteBtn = document.getElementById('markCompleteBtn');
            if (markCompleteBtn) {
                markCompleteBtn.textContent = 'Start Demo';
                markCompleteBtn.disabled = false;
                markCompleteBtn.style.background = '#007AFF';
                
                markCompleteBtn.onclick = function() {
                    startDemo();
                };
            }
        }
        
        function startDemo() {
            updateDebugInfo('🚀 Starting demo simulation...');
            let demoTime = 0;
            const demoInterval = setInterval(() => {
                demoTime += 5; // Simulate 5 seconds per interval
                currentTime = demoTime;
                
                if (demoTime > watchedTime) {
                    watchedTime = demoTime;
                    progressData.lesson3.watched = watchedTime;
                }
                
                updateVideoProgress();
                updateOverallProgress();
                
                if (demoTime % 30 === 0) {
                    updateDebugInfo(`🎬 Demo progress: ${Math.floor((watchedTime/videoDuration)*100)}% | Time: ${formatTime(demoTime)}`);
                }
                
                // Enable completion at 90%
                const completionThreshold = videoDuration * 0.9;
                const markCompleteBtn = document.getElementById('markCompleteBtn');
                if (watchedTime >= completionThreshold && !isCompleted) {
                    markCompleteBtn.disabled = false;
                    markCompleteBtn.textContent = 'Mark Complete';
                    markCompleteBtn.style.background = '#28a745';
                    markCompleteBtn.onclick = function() { completeLesson(); };
                    updateDebugInfo('🎯 90% reached - completion enabled');
                }
                
                // Auto-complete at end
                if (demoTime >= videoDuration) {
                    clearInterval(demoInterval);
                    completeLesson();
                    updateDebugInfo('🏁 Demo completed!');
                }
            }, 1000); // Update every second for demo
        }
            
            .course-sidebar {
                order: 1;
            }
            
            .video-player-wrapper {
                order: 2;
            }
        }
        
        @media (max-width: 768px) {
            .course-header {
                padding: 2rem 1rem 1rem;
            }
            
            .course-info h1 {
                font-size: 2rem;
            }
            
            .video-section {
                padding: 2rem 1rem;
            }
            
            .course-sidebar,
            .video-player-wrapper {
                margin: 0;
            }
            
            .footer-container {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 480px) {
            .footer-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <nav class="nav">
            <div class="logo">ArchAdemia.</div>
            
            <ul class="nav-links">
                <li><a href="index.html">About</a></li>
                <li><a href="lessons.html">Lessons</a></li>
                <li><a href="resources.html">Resources</a></li>
                <li><a href="blog.html">Blog</a></li>
                <li><a href="pricing.html">Pricing</a></li>
            </ul>
            
            <div class="nav-buttons">
                <button class="theme-toggle" id="themeToggle">
                    <svg class="theme-icon" viewBox="0 0 24 24">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                    </svg>
                </button>
            </div>
        </nav>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Course Header -->
        <section class="course-header">
            <div class="course-header-container">
                <div class="course-info">
                    <h1>SketchUp Fundamentals</h1>
                    <p>Master the essential tools and techniques for architectural modeling in SketchUp. This comprehensive course covers everything from basic navigation to advanced modeling workflows.</p>
                    <div class="course-meta">
                        <span>12 lessons</span>
                        <span>4.5 hours total</span>
                        <span>Beginner level</span>
                    </div>
                </div>
                
                <div class="course-progress-card">
                    <h3 class="progress-title">Your Progress</h3>
                    <div class="overall-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" id="overallProgress" style="width: 25%;"></div>
                        </div>
                        <div class="progress-text">
                            <span id="progressPercentage">25% complete</span>
                            <span id="timeRemaining">3h 20m remaining</span>
                        </div>
                    </div>
                    <button class="continue-btn" onclick="continueWatching()">Continue Learning</button>
                </div>
            </div>
        </section>
        
        <!-- Video Section -->
        <section class="video-section">
            <div class="video-container">
                <div class="video-player-wrapper">
                    <!-- Your Custom Vimeo Video -->
                    <iframe id="vimeoPlayer" 
                            src="https://player.vimeo.com/video/1106419727?h=0&title=0&byline=0&portrait=0" 
                            class="video-player"
                            allow="autoplay; fullscreen; picture-in-picture">
                    </iframe>
                    
                    <div class="video-controls">
                        <h3 class="video-title">Lesson 3: Basic Modeling Tools</h3>
                        <div class="video-progress">
                            <div class="video-progress-text" id="videoProgressText">Progress: 0% watched</div>
                            <div class="progress-bar">
                                <div class="progress-fill" id="videoProgress" style="width: 0%;"></div>
                            </div>
                        </div>
                        <div class="video-actions">
                            <button class="mark-complete-btn" id="markCompleteBtn" disabled>Mark Complete</button>
                            <button class="reset-btn" onclick="resetProgress()">Reset Progress</button>
                        </div>
                    </div>
                </div>
                
                <div class="course-sidebar">
                    <h3 class="sidebar-title">Course Contents</h3>
                    <ul class="lesson-list">
                        <li class="lesson-item completed" onclick="switchVideo(1)">
                            <div class="lesson-title">Introduction to SketchUp</div>
                            <div class="lesson-duration">12 min</div>
                            <div class="lesson-status">✓</div>
                        </li>
                        <li class="lesson-item completed" onclick="switchVideo(2)">
                            <div class="lesson-title">Interface Overview</div>
                            <div class="lesson-duration">18 min</div>
                            <div class="lesson-status">✓</div>
                        </li>
                        <li class="lesson-item active" onclick="switchVideo(3)">
                            <div class="lesson-title">Basic Modeling Tools</div>
                            <div class="lesson-duration">24 min</div>
                            <div class="lesson-status">▶</div>
                        </li>
                        <li class="lesson-item" onclick="switchVideo(4)">
                            <div class="lesson-title">Working with Groups</div>
                            <div class="lesson-duration">19 min</div>
                            <div class="lesson-status"></div>
                        </li>
                        <li class="lesson-item" onclick="switchVideo(5)">
                            <div class="lesson-title">Materials and Textures</div>
                            <div class="lesson-duration">22 min</div>
                            <div class="lesson-status"></div>
                        </li>
                        <li class="lesson-item" onclick="switchVideo(6)">
                            <div class="lesson-title">Advanced Modeling</div>
                            <div class="lesson-duration">28 min</div>
                            <div class="lesson-status"></div>
                        </li>
                    </ul>
                    
                    <!-- Enhanced Debug Panel -->
                    <div class="debug-panel">
                        <h4 class="debug-title">Video API Debug</h4>
                        <div class="debug-info" id="debugInfo">
Initializing Vimeo player...
Waiting for video to load...
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-container">
            <div class="footer-section">
                <h4>Courses</h4>
                <ul>
                    <li><a href="#">SketchUp</a></li>
                    <li><a href="#">Revit</a></li>
                    <li><a href="#">AutoCAD</a></li>
                    <li><a href="#">Rhino</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>Community</h4>
                <ul>
                    <li><a href="#">Discussion Board</a></li>
                    <li><a href="#">Project Gallery</a></li>
                    <li><a href="#">Events</a></li>
                    <li><a href="#">Jobs</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>Support</h4>
                <ul>
                    <li><a href="#">Help Center</a></li>
                    <li><a href="#">Contact Us</a></li>
                    <li><a href="#">FAQ</a></li>
                    <li><a href="#">Terms</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>Company</h4>
                <ul>
                    <li><a href="#">About</a></li>
                    <li><a href="#">Careers</a></li>
                    <li><a href="#">Privacy</a></li>
                    <li><a href="#">Blog</a></li>
                </ul>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 ArchAdemia. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Video tracking variables
        let player;
        let videoDuration = 0;
        let watchedTime = 0;
        let currentTime = 0;
        let isCompleted = false;
        let progressData = {
            lesson1: { watched: 720, duration: 720, completed: true },
            lesson2: { watched: 1080, duration: 1080, completed: true },
            lesson3: { watched: 0, duration: 1440, completed: false }, // Reset for testing
            lesson4: { watched: 0, duration: 1140, completed: false },
            lesson5: { watched: 0, duration: 1320, completed: false },
            lesson6: { watched: 0, duration: 1680, completed: false }
        };
        
        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Theme functionality
            const themeToggle = document.getElementById('themeToggle');
            const currentTheme = localStorage.getItem('theme') || 'light';
            
            document.documentElement.setAttribute('data-theme', currentTheme);
            updateThemeIcon(currentTheme);
            
            function updateThemeIcon(theme) {
                if (themeToggle) {
                    const icon = themeToggle.querySelector('.theme-icon path');
                    if (icon) {
                        if (theme === 'dark') {
                            icon.setAttribute('d', 'M12 1v2M12 21v2m11-10h-2M4 12H2m15.364 6.364l-1.414-1.414M6.05 6.05L4.636 4.636m12.728 0L16.95 6.05M6.05 17.95l-1.414 1.414M16 12a4 4 0 11-8 0 4 4 0 018 0z');
                        } else {
                            icon.setAttribute('d', 'M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z');
                        }
                    }
                }
            }
            
            function toggleTheme() {
                const currentTheme = document.documentElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                updateThemeIcon(newTheme);
            }
            
            if (themeToggle) {
                themeToggle.addEventListener('click', toggleTheme);
            }
            
            // Initialize Vimeo player
            initializeVideoPlayer();
            
            // Update overall course progress
            updateOverallProgress();
        });
        
        function initializeVideoPlayer() {
            // Check if Vimeo Player API is available
            if (typeof Vimeo === 'undefined') {
                updateDebugInfo('❌ Vimeo Player API not available in this environment');
                updateDebugInfo('📋 Note: External scripts may not load in artifact preview');
                updateDebugInfo('💡 Try copying code to local HTML file for full testing');
                
                // Simulate video for demo purposes
                simulateVideoForDemo();
                return;
            }
            
            const iframe = document.getElementById('vimeoPlayer');
            
            try {
                player = new Vimeo.Player(iframe);
                updateDebugInfo('✅ Vimeo Player initialized, loading video...');
                
                // Get video duration
                player.getDuration().then(function(duration) {
                    videoDuration = duration;
                    updateDebugInfo(`📹 Video loaded: ${formatTime(duration)} duration`);
                    updateDebugInfo(`🆔 Video ID: 1106419727`);
                    
                    // Set initial progress for current lesson
                    watchedTime = progressData.lesson3.watched;
                    if (watchedTime > 0) {
                        player.setCurrentTime(watchedTime);
                        updateVideoProgress();
                        updateDebugInfo(`⏯ Resumed at: ${formatTime(watchedTime)}`);
                    }
                }).catch(function(error) {
                    updateDebugInfo(`❌ Error loading video: ${error.message}`);
                });
            } catch (error) {
                updateDebugInfo(`❌ Error initializing player: ${error.message}`);
                simulateVideoForDemo();
            }
            
            // Track video progress
            player.on('timeupdate', function(data) {
                currentTime = data.seconds;
                
                // Update watched time (only count forward progress)
                if (currentTime > watchedTime) {
                    watchedTime = currentTime;
                    progressData.lesson3.watched = watchedTime;
                }
                
                updateVideoProgress();
                
                // Enable completion button at 90% watched
                const completionThreshold = videoDuration * 0.9;
                const markCompleteBtn = document.getElementById('markCompleteBtn');
                if (watchedTime >= completionThreshold && !isCompleted) {
                    markCompleteBtn.disabled = false;
                    markCompleteBtn.textContent = 'Mark Complete';
                    updateDebugInfo(`90% watched - completion enabled`);
                }
                
                // Log progress every 30 seconds for debugging
                if (Math.floor(currentTime) % 30 === 0 && Math.floor(currentTime) !== Math.floor(currentTime - 1)) {
                    updateDebugInfo(`Progress: ${Math.floor((watchedTime/videoDuration)*100)}% | Time: ${formatTime(currentTime)}`);
                }
            });
            
            // Track when video ends
            player.on('ended', function() {
                completeLesson();
                updateDebugInfo(`Video ended! Auto-completing lesson.`);
            });
            
            // Track play/pause events
            player.on('play', function() {
                updateDebugInfo(`▶ Playing at ${formatTime(currentTime)}`);
            });
            
            player.on('pause', function() {
                updateDebugInfo(`⏸ Paused at ${formatTime(currentTime)}`);
            });
            
            // Track seeking
            player.on('seeked', function(data) {
                updateDebugInfo(`⏭ Seeked to ${formatTime(data.seconds)}`);
            });
            
            // Error handling
            player.on('error', function(error) {
                updateDebugInfo(`❌ Player error: ${error.message}`);
            });
        }
        
        function updateVideoProgress() {
            const progressPercentage = videoDuration > 0 ? (watchedTime / videoDuration) * 100 : 0;
            const videoProgressBar = document.getElementById('videoProgress');
            const videoProgressText = document.getElementById('videoProgressText');
            
            if (videoProgressBar) {
                videoProgressBar.style.width = progressPercentage + '%';
            }
            
            if (videoProgressText) {
                videoProgressText.textContent = `Progress: ${Math.floor(progressPercentage)}% watched (${formatTime(watchedTime)} of ${formatTime(videoDuration)})`;
            }
        }
        
        function updateOverallProgress() {
            const totalLessons = Object.keys(progressData).length;
            const completedLessons = Object.values(progressData).filter(lesson => lesson.completed).length;
            const currentLessonProgress = videoDuration > 0 ? progressData.lesson3.watched / videoDuration : 0;
            
            // Calculate overall progress including partial progress on current lesson
            const overallProgress = ((completedLessons + currentLessonProgress) / totalLessons) * 100;
            
            const progressBar = document.getElementById('overallProgress');
            const progressText = document.getElementById('progressPercentage');
            const timeRemaining = document.getElementById('timeRemaining');
            
            if (progressBar) {
                progressBar.style.width = overallProgress + '%';
            }
            
            if (progressText) {
                progressText.textContent = `${Math.floor(overallProgress)}% complete`;
            }
            
            if (timeRemaining) {
                const totalRemaining = Object.values(progressData).reduce((total, lesson) => {
                    return total + Math.max(0, lesson.duration - lesson.watched);
                }, 0);
                timeRemaining.textContent = `${formatTime(totalRemaining)} remaining`;
            }
        }
        
        function completeLesson() {
            isCompleted = true;
            progressData.lesson3.completed = true;
            progressData.lesson3.watched = videoDuration;
            
            // Update UI
            const markCompleteBtn = document.getElementById('markCompleteBtn');
            const currentLesson = document.querySelector('.lesson-item.active');
            
            if (markCompleteBtn) {
                markCompleteBtn.textContent = 'Completed ✓';
                markCompleteBtn.style.background = '#28a745';
                markCompleteBtn.disabled = true;
            }
            
            if (currentLesson) {
                currentLesson.classList.remove('active');
                currentLesson.classList.add('completed');
                currentLesson.querySelector('.lesson-status').textContent = '✓';
            }
            
            updateOverallProgress();
            updateDebugInfo(`✅ Lesson marked complete!`);
            
            // Auto-advance to next lesson after 2 seconds
            setTimeout(() => {
                updateDebugInfo(`➡ Auto-advancing to next lesson...`);
                switchVideo(4);
            }, 2000);
        }
        
        function switchVideo(lessonNumber) {
            // Update lesson UI
            document.querySelectorAll('.lesson-item').forEach((item, index) => {
                item.classList.remove('active');
                if (index + 1 === lessonNumber && !item.classList.contains('completed')) {
                    item.classList.add('active');
                    item.querySelector('.lesson-status').textContent = '▶';
                }
            });
            
            // Reset video tracking for new lesson
            watchedTime = progressData[`lesson${lessonNumber}`]?.watched || 0;
            isCompleted = progressData[`lesson${lessonNumber}`]?.completed || false;
            
            // Update video title
            const videoTitle = document.querySelector('.video-title');
            const lessonTitles = {
                1: 'Introduction to SketchUp',
                2: 'Interface Overview', 
                3: 'Basic Modeling Tools',
                4: 'Working with Groups',
                5: 'Materials and Textures',
                6: 'Advanced Modeling'
            };
            
            if (videoTitle) {
                videoTitle.textContent = `Lesson ${lessonNumber}: ${lessonTitles[lessonNumber]}`;
            }
            
            // Reset mark complete button
            const markCompleteBtn = document.getElementById('markCompleteBtn');
            if (markCompleteBtn) {
                if (isCompleted) {
                    markCompleteBtn.textContent = 'Completed ✓';
                    markCompleteBtn.style.background = '#28a745';
                    markCompleteBtn.disabled = true;
                } else {
                    markCompleteBtn.textContent = 'Mark Complete';
                    markCompleteBtn.style.background = '#28a745';
                    markCompleteBtn.disabled = true;
                }
            }
            
            updateDebugInfo(`🔄 Switched to Lesson ${lessonNumber}: ${lessonTitles[lessonNumber]}`);
            
            // Note: In a real implementation, you would update the iframe src here
            // For now, keeping the same video for testing purposes
        }
        
        function resetProgress() {
            watchedTime = 0;
            currentTime = 0;
            isCompleted = false;
            progressData.lesson3.watched = 0;
            progressData.lesson3.completed = false;
            
            player.setCurrentTime(0);
            updateVideoProgress();
            updateOverallProgress();
            
            const markCompleteBtn = document.getElementById('markCompleteBtn');
            if (markCompleteBtn) {
                markCompleteBtn.textContent = 'Mark Complete';
                markCompleteBtn.style.background = '#28a745';
                markCompleteBtn.disabled = true;
            }
            
            updateDebugInfo('🔄 Progress reset for current lesson');
        }
        
        function continueWatching() {
            // Scroll to video and start playing
            document.querySelector('.video-section').scrollIntoView({ 
                behavior: 'smooth',
                block: 'center'
            });
            
            setTimeout(() => {
                if (player) {
                    player.play().then(() => {
                        updateDebugInfo('▶ Video started via Continue button');
                    }).catch((error) => {
                        updateDebugInfo(`❌ Play error: ${error.message}`);
                    });
                }
            }, 500);
        }
        
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}:${String(remainingSeconds).padStart(2, '0')}`;
        }
        
        function updateDebugInfo(message) {
            const debugInfo = document.getElementById('debugInfo');
            if (debugInfo) {
                const timestamp = new Date().toLocaleTimeString();
                const newContent = `[${timestamp}] ${message}`;
                const existingContent = debugInfo.textContent.split('\n').slice(0, 10);
                debugInfo.textContent = [newContent, ...existingContent].join('\n');
            }
        }
        
        // Manual complete button
        document.addEventListener('DOMContentLoaded', function() {
            const markCompleteBtn = document.getElementById('markCompleteBtn');
            if (markCompleteBtn) {
                markCompleteBtn.addEventListener('click', function() {
                    if (!this.disabled) {
                        completeLesson();
                        updateDebugInfo('✅ Manually marked complete via button');
                    }
                });
            }
        });
    </script>
</body>
</html>
